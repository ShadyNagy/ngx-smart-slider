import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { SmartSliderService } from '../smart-slider.service';
import { SmartSliderItem } from '../../models/smart-slider-item';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class SmartSliderHorizontalComponent implements OnInit {
    private element;
    private sanitizer;
    _items: SmartSliderItem[];
    set items(value: Array<SmartSliderItem>);
    _showPrevious: boolean;
    set showPrevious(value: boolean);
    _showNext: boolean;
    set showNext(value: boolean);
    _showDots: boolean;
    set showDots(value: boolean);
    _autoplay: boolean;
    set autoplay(value: boolean);
    _loop: boolean;
    set loop(value: boolean);
    _pauseOnHover: boolean;
    set pauseOnHover(value: boolean);
    _itemMargin: string;
    set itemMargin(value: string);
    _itemPadding: string;
    set itemPadding(value: string);
    _textPosition: string;
    set textPosition(value: 'centered-top' | 'centered-bottom' | 'centered' | 'bottom-right ' | 'top-right' | 'top-left' | 'bottom-left');
    _textColor: string;
    set textColor(value: string);
    _cellLimit: number;
    set cellLimit(value: number);
    _height: string;
    containerHeight: string;
    set height(value: string);
    _autoplayInterval: number;
    set autoplayInterval(value: number);
    _transitionDuration: number;
    set transitionDuration(value: number);
    _class: string;
    set class(value: string);
    select: EventEmitter<any>;
    get hostStyles(): SafeStyle;
    get hostClasses(): string;
    onResize(): void;
    width: string;
    isNext: boolean;
    smartSliderService: SmartSliderService;
    constructor(element: ElementRef, sanitizer: DomSanitizer);
    get slideInOut(): {
        value: number;
        params: {
            inWidth: string;
            inHeight: string;
            inTiming: number;
        };
    };
    private resize;
    ngOnInit(): void;
    onItemClick(selected: any): void;
    isNextDisabled(): boolean;
    isPreviousDisabled(): boolean;
    show(item: SmartSliderItem): boolean;
    onNext(): void;
    onPrevious(): void;
    isLast(item: any): boolean;
    onTransitionEnd(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SmartSliderHorizontalComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SmartSliderHorizontalComponent, "smart-slider-horizontal", never, { "items": "items"; "showPrevious": "showPrevious"; "showNext": "showNext"; "showDots": "showDots"; "autoplay": "autoplay"; "loop": "loop"; "pauseOnHover": "pauseOnHover"; "itemMargin": "itemMargin"; "itemPadding": "itemPadding"; "textPosition": "textPosition"; "textColor": "textColor"; "cellLimit": "cellLimit"; "height": "height"; "autoplayInterval": "autoplayInterval"; "transitionDuration": "transitionDuration"; "class": "class"; }, { "select": "select"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtc2xpZGVyLWhvcml6b250YWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNtYXJ0LXNsaWRlci1ob3Jpem9udGFsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU21hcnRTbGlkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc21hcnQtc2xpZGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTbWFydFNsaWRlckl0ZW0gfSBmcm9tICcuLi8uLi9tb2RlbHMvc21hcnQtc2xpZGVyLWl0ZW0nO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbWFydFNsaWRlckhvcml6b250YWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XHJcbiAgICBfaXRlbXM6IFNtYXJ0U2xpZGVySXRlbVtdO1xyXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxTbWFydFNsaWRlckl0ZW0+KTtcclxuICAgIF9zaG93UHJldmlvdXM6IGJvb2xlYW47XHJcbiAgICBzZXQgc2hvd1ByZXZpb3VzKHZhbHVlOiBib29sZWFuKTtcclxuICAgIF9zaG93TmV4dDogYm9vbGVhbjtcclxuICAgIHNldCBzaG93TmV4dCh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBfc2hvd0RvdHM6IGJvb2xlYW47XHJcbiAgICBzZXQgc2hvd0RvdHModmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgX2F1dG9wbGF5OiBib29sZWFuO1xyXG4gICAgc2V0IGF1dG9wbGF5KHZhbHVlOiBib29sZWFuKTtcclxuICAgIF9sb29wOiBib29sZWFuO1xyXG4gICAgc2V0IGxvb3AodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgX3BhdXNlT25Ib3ZlcjogYm9vbGVhbjtcclxuICAgIHNldCBwYXVzZU9uSG92ZXIodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgX2l0ZW1NYXJnaW46IHN0cmluZztcclxuICAgIHNldCBpdGVtTWFyZ2luKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgX2l0ZW1QYWRkaW5nOiBzdHJpbmc7XHJcbiAgICBzZXQgaXRlbVBhZGRpbmcodmFsdWU6IHN0cmluZyk7XHJcbiAgICBfdGV4dFBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgICBzZXQgdGV4dFBvc2l0aW9uKHZhbHVlOiAnY2VudGVyZWQtdG9wJyB8ICdjZW50ZXJlZC1ib3R0b20nIHwgJ2NlbnRlcmVkJyB8ICdib3R0b20tcmlnaHQgJyB8ICd0b3AtcmlnaHQnIHwgJ3RvcC1sZWZ0JyB8ICdib3R0b20tbGVmdCcpO1xyXG4gICAgX3RleHRDb2xvcjogc3RyaW5nO1xyXG4gICAgc2V0IHRleHRDb2xvcih2YWx1ZTogc3RyaW5nKTtcclxuICAgIF9jZWxsTGltaXQ6IG51bWJlcjtcclxuICAgIHNldCBjZWxsTGltaXQodmFsdWU6IG51bWJlcik7XHJcbiAgICBfaGVpZ2h0OiBzdHJpbmc7XHJcbiAgICBjb250YWluZXJIZWlnaHQ6IHN0cmluZztcclxuICAgIHNldCBoZWlnaHQodmFsdWU6IHN0cmluZyk7XHJcbiAgICBfYXV0b3BsYXlJbnRlcnZhbDogbnVtYmVyO1xyXG4gICAgc2V0IGF1dG9wbGF5SW50ZXJ2YWwodmFsdWU6IG51bWJlcik7XHJcbiAgICBfdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgICBzZXQgdHJhbnNpdGlvbkR1cmF0aW9uKHZhbHVlOiBudW1iZXIpO1xyXG4gICAgX2NsYXNzOiBzdHJpbmc7XHJcbiAgICBzZXQgY2xhc3ModmFsdWU6IHN0cmluZyk7XHJcbiAgICBzZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgZ2V0IGhvc3RTdHlsZXMoKTogU2FmZVN0eWxlO1xyXG4gICAgZ2V0IGhvc3RDbGFzc2VzKCk6IHN0cmluZztcclxuICAgIG9uUmVzaXplKCk6IHZvaWQ7XHJcbiAgICB3aWR0aDogc3RyaW5nO1xyXG4gICAgaXNOZXh0OiBib29sZWFuO1xyXG4gICAgc21hcnRTbGlkZXJTZXJ2aWNlOiBTbWFydFNsaWRlclNlcnZpY2U7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcik7XHJcbiAgICBnZXQgc2xpZGVJbk91dCgpOiB7XHJcbiAgICAgICAgdmFsdWU6IG51bWJlcjtcclxuICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgaW5XaWR0aDogc3RyaW5nO1xyXG4gICAgICAgICAgICBpbkhlaWdodDogc3RyaW5nO1xyXG4gICAgICAgICAgICBpblRpbWluZzogbnVtYmVyO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcHJpdmF0ZSByZXNpemU7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgb25JdGVtQ2xpY2soc2VsZWN0ZWQ6IGFueSk6IHZvaWQ7XHJcbiAgICBpc05leHREaXNhYmxlZCgpOiBib29sZWFuO1xyXG4gICAgaXNQcmV2aW91c0Rpc2FibGVkKCk6IGJvb2xlYW47XHJcbiAgICBzaG93KGl0ZW06IFNtYXJ0U2xpZGVySXRlbSk6IGJvb2xlYW47XHJcbiAgICBvbk5leHQoKTogdm9pZDtcclxuICAgIG9uUHJldmlvdXMoKTogdm9pZDtcclxuICAgIGlzTGFzdChpdGVtOiBhbnkpOiBib29sZWFuO1xyXG4gICAgb25UcmFuc2l0aW9uRW5kKCk6IHZvaWQ7XHJcbn1cclxuIl19